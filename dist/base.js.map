{"version":3,"sources":["../src/base.ts"],"names":["noop","publicClassMethods","Interface","constructor","data","updatedCB","_updatedCB","_updatedData","_originalData","$isInterface"],"mappings":";;;;;;;;;AAAA,MAAMA,IAAI,GAAG,MAAM,IAAnB,C,CAEA;;;IAQYC,kB;;;WAAAA,kB;AAAAA,EAAAA,kB;AAAAA,EAAAA,kB;AAAAA,EAAAA,kB;GAAAA,kB,kCAAAA,kB;;AAKL,MAAeC,SAAf,CAAyB;AAO9BC,EAAAA,WAAW,GAAsD;AAAA,QAApDC,IAAoD,uEAA/B,EAA+B;AAAA,QAA3BC,SAA2B,uEAANL,IAAM;;AAAA;;AAAA;;AAAA;;AAAA;;AAC/D,SAAKM,UAAL,GAAkBD,SAAlB;AACA,SAAKE,YAAL,GAAoB,EAApB;AACA,SAAKC,aAAL,GAAqB,EAArB;AACD;;AACMC,EAAAA,YAAP,GAA+B;AAC7B,WAAO,IAAP;AACD;;AAd6B","sourcesContent":["const noop = () => null\n\n// type Deserializer = (key:string, data:any) => any\nexport interface Deserializer {\n  (key:string, data:any): any\n  serialize(key:string, data:any): any\n}\nexport interface Dictionary<T> {\n  [key: string]: T;\n}\nexport enum publicClassMethods  {\n  '$isInterface' = '$isInterface',\n  '$diff' = '$diff',\n  '$json' = '$json'\n}\nexport abstract class Interface {\n  \n  protected _updatedCB: Function\n  protected _originalData: Dictionary<any>\n  protected _updatedData: Dictionary<any>\n  protected _proxy: any\n\n  constructor (data:Dictionary<any>={}, updatedCB:Function = noop) {\n    this._updatedCB = updatedCB\n    this._updatedData = {}\n    this._originalData = {}\n  }\n  public $isInterface(): boolean {\n    return true\n  }\n  public abstract $json():any \n  public abstract $diff():any\n}\nexport type InterfaceClass = typeof Interface\nexport interface InterfaceLike extends InterfaceClass {\n  constructor (data:Dictionary<any>, updatedCB:Function):InterfaceLike\n}\n\n\n\n\n  \n"],"file":"base.js"}