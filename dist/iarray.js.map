{"version":3,"sources":["../src/iarray.ts"],"names":["noop","undefined","iArray","_elementHandler","handler","Handler","isInstance","Interface","isPrototypeOf","ArrayInterface","constructor","data","updatedCB","_updatedCB","map","d","deserialize","_proxy","Proxy","getHandlers","value","isDirty","serialize","$json","$diff","get","target","property","Object","keys","publicClassMethods","includes","set","index","Number","isNaN"],"mappings":"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","sourcesContent":["import { Interface, InterfaceLike, InterfaceClass, Dictionary, Deserializer, publicClassMethods } from './base'\n\nconst noop = () => undefined\n\nexport function iArray (_elementHandler:Deserializer|Interface|InterfaceLike|InterfaceClass):Interface {\n\n  const handler = <Deserializer>_elementHandler\n  const Handler = <InterfaceLike><unknown>_elementHandler\n  const isInstance = Interface.isPrototypeOf(Handler)\n\n  class ArrayInterface extends Interface {\n    protected data: Array<any>\n    protected isDirty: boolean = false\n    constructor (data:Dictionary<any> = [], updatedCB = noop) {\n      super()\n      this._updatedCB = updatedCB\n      this.data = data.map((d:any) => this.deserialize(d))\n      this._proxy = new Proxy(this.data, <ProxyHandler<any>><unknown>this)\n      return this._proxy\n    }\n\n    protected getHandlers() {\n      return {handler, Handler, isInstance}\n    }\n\n    protected deserialize (value:any):any {\n      const {handler, Handler, isInstance} = this.getHandlers()\n      if (isInstance) {\n        return new Handler(value, () => {\n          this.isDirty = true\n          this._updatedCB()\n        })\n      } else {\n        return handler(`iArray`, value)\n      }\n    }\n\n    protected serialize (value:any):any {\n      const {handler, Handler, isInstance} = this.getHandlers()\n      if (isInstance) {\n        return value?.$json\n      } else {\n        return handler.serialize(`iArray`, value)\n      }\n    }\n    \n    public $json():Array<any> {\n      return this.data.map((d:any) => this.serialize(d))\n    }\n    public $diff():Array<any> {\n      return this.isDirty ? this.$json() : []\n    }\n\n    protected get(target:Array<any>, property:number|string) {\n      if(Object.keys(publicClassMethods).includes(<string>property)) {\n        return this[<publicClassMethods>property]()\n      }\n      return target[<number>property]\n    }\n    protected set(target:Dictionary<any>, property:number|string, value:any) {\n      const index = Number(property)\n      this.isDirty = true\n      if (isNaN(index)) {\n        target[property] = value\n      } else {\n        target[index] = this.deserialize(value)\n        this._updatedCB()\n      }\n      return true\n    }\n}\n\n  return <Interface><unknown>ArrayInterface\n}\n"],"file":"iarray.js"}