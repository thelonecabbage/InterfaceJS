{"version":3,"sources":["../src/serializers.ts"],"names":["assertType","key","data","undefined","types","defined","notNull","includes","Error","JSON","stringify","isEmpty","val","iString","String","serialize","iNumber","Number","isNaN","iDate","date","Date","getDate","toISOString"],"mappings":";;;;;;;;;;;AACA,SAASA,UAAT,GAA8F;AAAA,MAAzEC,GAAyE,uEAA5D,EAA4D;AAAA,MAAxDC,IAAwD,uEAA7CC,SAA6C;AAAA,MAAlCC,KAAkC,uEAAZ,EAAY;AAC5F,QAAMC,OAAO,GAAGH,IAAI,KAAKC,SAAzB;AACA,QAAMG,OAAO,GAAGJ,IAAI,KAAK,IAAzB;;AACA,MAAIG,OAAO,IAAIC,OAAX,IAAsB,CAACF,KAAK,CAACG,QAAN,CAAe,OAAOL,IAAtB,CAA3B,EAAwD;AACtD,UAAMM,KAAK,kBAAUP,GAAV,oBAAqBQ,IAAI,CAACC,SAAL,CAAeR,IAAf,CAArB,gCAA6DE,KAA7D,QAAX;AACD;;AACD,SAAO,IAAP;AACD;;AACD,SAASO,OAAT,CAAkBC,GAAlB,EAA2B;AACzB,SAAO,CAACT,SAAD,EAAY,IAAZ,EAAkB,EAAlB,EAAsBI,QAAtB,CAA+BK,GAA/B,CAAP;AACD;;AACM,SAASC,OAAT,GAAyE;AAAA,MAA1CZ,GAA0C,uEAA7B,EAA6B;AAAA,MAAzBC,IAAyB,uEAAX,EAAW;AAC9EF,EAAAA,UAAU,CAACC,GAAD,EAAMC,IAAN,EAAY,CAAC,QAAD,CAAZ,CAAV;AACA,SAAOS,OAAO,CAACT,IAAD,CAAP,GAAgB,EAAhB,GAAqBY,MAAM,CAACZ,IAAD,CAAlC;AACD;;AACDW,OAAO,CAACE,SAAR,GAAoBF,OAApB;;AAEO,SAASG,OAAT,GAA0F;AAAA,MAA3Df,GAA2D,uEAA9C,EAA8C;AAAA,MAA1CC,IAA0C,uEAArB,EAAqB;AAC/FF,EAAAA,UAAU,CAACC,GAAD,EAAMC,IAAN,EAAY,CAAC,QAAD,EAAW,QAAX,CAAZ,CAAV;AACA,QAAMU,GAAG,GAAGK,MAAM,CAACf,IAAD,CAAlB;;AACA,MAAIgB,KAAK,CAACN,GAAD,CAAT,EAAgB;AACd,QAAID,OAAO,CAACT,IAAD,CAAX,EAAmB;AACjB,aAAOC,SAAP;AACD;;AACD,UAAMK,KAAK,kBAAUP,GAAV,oBAAqBQ,IAAI,CAACC,SAAL,CAAeR,IAAf,CAArB,kCAAX;AACD;;AACD,SAAOU,GAAP;AACD;;AACDI,OAAO,CAACD,SAAR,GAAoBC,OAApB;;AAEO,SAASG,KAAT,GAAsF;AAAA,MAAzDlB,GAAyD,uEAA5C,EAA4C;AAAA,MAAxCC,IAAwC;AAC3FF,EAAAA,UAAU,CAACC,GAAD,EAAMC,IAAN,EAAY,CAAC,QAAD,EAAW,QAAX,EAAqB,WAArB,CAAZ,CAAV;AACA,QAAMkB,IAAI,GAAG,IAAIC,IAAJ,CAASnB,IAAT,CAAb;;AACA,MAAIgB,KAAK,CAACE,IAAI,CAACE,OAAL,EAAD,CAAT,EAA2B;AACzB,QAAIX,OAAO,CAACT,IAAD,CAAX,EAAmB;AACjB,aAAOC,SAAP;AACD;;AACD,UAAMK,KAAK,kBAAUP,GAAV,oBAAqBQ,IAAI,CAACC,SAAL,CAAeR,IAAf,CAArB,4BAAX;AACD;;AACD,SAAOkB,IAAP;AACD;;AACDD,KAAK,CAACJ,SAAN,GAAkB,YAAkD;AAAA,MAAxCd,GAAwC,uEAAlC,EAAkC;AAAA,MAA9BC,IAA8B;AAClE,QAAMkB,IAAI,GAAGD,KAAK,CAAClB,GAAD,EAAMC,IAAN,CAAlB;AACA,SAAOkB,IAAI,GAAGA,IAAI,CAACG,WAAL,EAAH,GAAwBpB,SAAnC;AACD,CAHD","sourcesContent":["import { Deserializer } from './base'\nfunction assertType (key:string = '', data:any = undefined, types:Array<string> = []):boolean {\n  const defined = data !== undefined\n  const notNull = data !== null\n  if (defined && notNull && !types.includes(typeof data)) {\n    throw Error(`Type \"${key}\" = \"${JSON.stringify(data)}\" is not typeof \"${types}\"`)\n  }\n  return true\n}\nfunction isEmpty (val:any) {\n  return [undefined, null, ''].includes(val)\n}\nexport function iString<Deserializer>(key:string = '', data:string = ''):string {\n  assertType(key, data, ['string'])\n  return isEmpty(data) ? '' : String(data)\n}\niString.serialize = iString\n\nexport function iNumber<Deserializer>(key:string = '', data:string|number = ''):number|undefined {\n  assertType(key, data, ['string', 'number'])\n  const val = Number(data)\n  if (isNaN(val)) {\n    if (isEmpty(data)) {\n      return undefined\n    }\n    throw Error(`Type \"${key}\" = \"${JSON.stringify(data)}\" is not typeof type Number`)\n  }\n  return val\n}\niNumber.serialize = iNumber\n\nexport function iDate<Deserializer>(key:string = '', data:string|number|Date):Date|undefined {\n  assertType(key, data, ['string', 'object', 'undefined'])\n  const date = new Date(data)\n  if (isNaN(date.getDate())) {\n    if (isEmpty(data)) {\n      return undefined\n    }\n    throw Error(`Type \"${key}\" = \"${JSON.stringify(data)}\" is not a valid Date`)\n  }\n  return date\n}\niDate.serialize = function (key = '', data:Date):string | undefined {\n  const date = iDate(key, data)\n  return date ? date.toISOString() : undefined\n}\n\n\n"],"file":"serializers.js"}